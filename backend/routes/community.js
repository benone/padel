const express = require('express');
const { authenticateToken } = require('../middleware/auth');
const { success, error } = require('../utils/responseHelper');
const { createMockData } = require('../data/mockData');

const router = express.Router();

// Mock community data
const createCommunityData = (baseUrl) => {
  const posts = [
    {
      id: 'pavel_welcome',
      user: {
        id: 'pavel_kravtsov',
        name: '–ü–∞–≤–µ–ª –ö—Ä–∞–≤—Ü–æ–≤',
        avatar: `${baseUrl}/api/images-simple/generate?prompt=–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π%20–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä%20–ø–æ%20–ø–∞–¥–µ–ª—É%20–ø–∞–≤–µ–ª%20–∫—Ä–∞–≤—Ü–æ–≤%20–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ&width=100&height=100`,
        verified: false
      },
      content: '–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏, –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ª—é–¥—å–º–∏ —Å–æ —Å—Ö–æ–∂–∏–º–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üéæ',
      subtitle: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      likes: 0,
      comments: 0,
      timestamp: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      type: 'welcome'
    },
    {
      id: '1',
      user: {
        id: 'user_789',
        name: '–ê–ª–µ–∫—Å–µ–π –ì–∞–ª–∞–Ω–æ–≤',
        avatar: `${baseUrl}/api/images-simple/generate?prompt=–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π%20–∏–≥—Ä–æ–∫%20–≤%20–ø–∞–¥–µ–ª%20–º—É–∂—á–∏–Ω–∞%20–∞–ª–µ–∫—Å–µ–π%20–≥–∞–ª–∞–Ω–æ–≤%20–ø–æ—Ä—Ç—Ä–µ—Ç&width=100&height=100`,
        verified: true
      },
      content: '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º üéæ‚ö°Ô∏è #–ê–ª–µ–∫—Å–µ–π–ì–∞–ª–∞–Ω–æ–≤',
      image: `${baseUrl}/api/images-simple/generate?prompt=–∫–æ—Ä—Ç%20–¥–ª—è%20–ø–∞–¥–µ–ª–∞%20–ø–∞—Ä–∞%20–∏–≥—Ä–∞–µ—Ç%20–≤–º–µ—Å—Ç–µ%20—Å—á–∞—Å—Ç–ª–∏–≤—ã–µ%20–∑–∞–∫–∞—Ç&width=400&height=300`,
      likes: 1012,
      comments: 23,
      timestamp: '13 –∞–ø—Ä, 2023',
      type: 'post'
    },
    {
      id: '2',
      user: {
        id: 'user_456',
        name: '–ú–∞—Ä–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
        avatar: `${baseUrl}/api/images-simple/generate?prompt=–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è%20–∏–≥—Ä–æ–∫%20–≤%20–ø–∞–¥–µ–ª%20–∂–µ–Ω—â–∏–Ω–∞%20–º–∞—Ä–∏–Ω–∞%20–ø–æ—Ä—Ç—Ä–µ—Ç&width=100&height=100`,
        verified: false
      },
      content: '–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è! –ö—Ç–æ –≥–æ—Ç–æ–≤ –∫ –º–∞—Ç—á—É –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º? üí™',
      likes: 45,
      comments: 8,
      timestamp: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      type: 'post'
    },
    {
      id: '3',
      user: {
        id: 'user_321',
        name: '–ê–Ω–¥—Ä–µ–π –°–º–∏—Ä–Ω–æ–≤',
        avatar: `${baseUrl}/api/images-simple/generate?prompt=professional%20padel%20player%20male%20russian%20headshot&width=100&height=100`,
        verified: false
      },
      content: '–ù–æ–≤—ã–π –∫–æ—Ä—Ç –≤ "–ü–∞–¥–µ–ª –¶–µ–Ω—Ç—Ä–µ" –ø—Ä–æ—Å—Ç–æ –æ–≥–æ–Ω—å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å üî•',
      image: `${baseUrl}/api/images-simple/generate?prompt=—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π%20–∫–æ—Ä—Ç%20–¥–ª—è%20–ø–∞–¥–µ–ª–∞%20–∏–Ω—Ç–µ—Ä—å–µ—Ä%20–æ—Å–≤–µ—â–µ–Ω–∏–µ&width=400&height=300`,
      likes: 78,
      comments: 15,
      timestamp: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
      type: 'post'
    }
  ];

  const suggestions = [
    {
      id: 'user_456',
      name: '–ê–ª–µ–∫—Å–µ–π –ì–∞–ª–∞–Ω–æ–≤',
      avatar: `${baseUrl}/api/images-simple/generate?prompt=–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π%20–∏–≥—Ä–æ–∫%20–≤%20–ø–∞–¥–µ–ª%20–º—É–∂—á–∏–Ω–∞%20–∞–ª–µ–∫—Å–µ–π%20–≥–∞–ª–∞–Ω–æ–≤%20–ø–æ—Ä—Ç—Ä–µ—Ç&width=100&height=100`,
      verified: true,
      mutualFriends: 3,
      level: 8.2
    },
    {
      id: 'user_321',
      name: '–ê–Ω–¥—Ä–µ–π –°–º–∏—Ä–Ω–æ–≤',
      avatar: `${baseUrl}/api/images-simple/generate?prompt=professional%20padel%20player%20male%20russian%20headshot&width=100&height=100`,
      verified: false,
      mutualFriends: 1,
      level: 6.8
    },
    {
      id: 'user_654',
      name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
      avatar: `${baseUrl}/api/images-simple/generate?prompt=–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è%20–∏–≥—Ä–æ–∫%20–≤%20–ø–∞–¥–µ–ª%20–∂–µ–Ω—â–∏–Ω–∞%20–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞%20–ø–æ—Ä—Ç—Ä–µ—Ç&width=100&height=100`,
      verified: false,
      mutualFriends: 2,
      level: 7.1
    },
    {
      id: 'user_987',
      name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
      avatar: `${baseUrl}/api/images-simple/generate?prompt=—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π%20–º—É–∂—á–∏–Ω–∞%20–ø–∞–¥–µ–ª%20–∏–≥—Ä–æ–∫%20–¥–º–∏—Ç—Ä–∏–π%20–ø–æ—Ä—Ç—Ä–µ—Ç&width=100&height=100`,
      verified: false,
      mutualFriends: 0,
      level: 6.5
    }
  ];

  return { posts, suggestions };
};

// GET /api/community/posts - Get community posts feed
router.get('/posts', authenticateToken, (req, res) => {
  try {
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const { posts } = createCommunityData(baseUrl);
    
    // Filter by type if specified
    const type = req.query.type;
    const filteredPosts = type ? posts.filter(post => post.type === type) : posts;
    
    // Pagination
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    
    const paginatedPosts = filteredPosts.slice(startIndex, endIndex);
    
    console.log(`üì± Community: Retrieved ${paginatedPosts.length} posts (page ${page})`);
    
    res.json(success(paginatedPosts, {
      currentPage: page,
      totalPages: Math.ceil(filteredPosts.length / limit),
      totalPosts: filteredPosts.length,
      hasMore: endIndex < filteredPosts.length
    }));
  } catch (err) {
    console.error('‚ùå Community: Error getting posts:', err);
    res.status(500).json(error('Failed to retrieve posts', 500));
  }
});

// GET /api/community/suggestions - Get suggested users to follow
router.get('/suggestions', authenticateToken, (req, res) => {
  try {
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const mockData = createMockData(baseUrl);
    const { suggestions } = mockData;
    
    // Limit number of suggestions
    const limit = parseInt(req.query.limit) || 4;
    const limitedSuggestions = suggestions.slice(0, limit);
    
    console.log(`üë• Community: Retrieved ${limitedSuggestions.length} user suggestions`);
    
    res.json(success(limitedSuggestions));
  } catch (err) {
    console.error('‚ùå Community: Error getting suggestions:', err);
    res.status(500).json(error('Failed to retrieve suggestions', 500));
  }
});

// POST /api/community/posts/:postId/like - Like/unlike a post
router.post('/posts/:postId/like', authenticateToken, (req, res) => {
  try {
    const { postId } = req.params;
    const userId = req.user.id;
    
    // In a real app, this would update the database
    console.log(`‚ù§Ô∏è Community: User ${userId} liked post ${postId}`);
    
    res.json(success({ 
      liked: true, 
      newLikeCount: Math.floor(Math.random() * 100) + 1 
    }));
  } catch (err) {
    console.error('‚ùå Community: Error liking post:', err);
    res.status(500).json(error('Failed to like post', 500));
  }
});

// POST /api/community/users/:userId/follow - Follow/unfollow a user
router.post('/users/:userId/follow', authenticateToken, (req, res) => {
  try {
    const { userId } = req.params;
    const currentUserId = req.user.id;
    
    if (userId === currentUserId) {
      return res.status(400).json(error('Cannot follow yourself', 400));
    }
    
    // In a real app, this would update the database
    console.log(`üë• Community: User ${currentUserId} followed user ${userId}`);
    
    res.json(success({ 
      following: true,
      message: 'Successfully followed user'
    }));
  } catch (err) {
    console.error('‚ùå Community: Error following user:', err);
    res.status(500).json(error('Failed to follow user', 500));
  }
});

// GET /api/community/search - Search users and posts
router.get('/search', authenticateToken, (req, res) => {
  try {
    const query = req.query.q;
    if (!query) {
      return res.status(400).json(error('Search query is required', 400));
    }
    
    const baseUrl = `${req.protocol}://${req.get('host')}`;
    const { posts, suggestions } = createCommunityData(baseUrl);
    
    // Simple text search
    const searchLower = query.toLowerCase();
    
    const matchingPosts = posts.filter(post => 
      post.content.toLowerCase().includes(searchLower) ||
      post.user.name.toLowerCase().includes(searchLower)
    );
    
    const matchingUsers = suggestions.filter(user =>
      user.name.toLowerCase().includes(searchLower)
    );
    
    console.log(`üîç Community: Search for "${query}" found ${matchingPosts.length} posts, ${matchingUsers.length} users`);
    
    res.json(success({
      posts: matchingPosts,
      users: matchingUsers,
      query: query
    }));
  } catch (err) {
    console.error('‚ùå Community: Error searching:', err);
    res.status(500).json(error('Search failed', 500));
  }
});

module.exports = router;